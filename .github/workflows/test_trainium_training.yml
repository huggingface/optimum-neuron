name: Optimum Neuron - Test training on Trainium

on:
  push:
    branches: [ main ]
    paths:
      - "setup.py"
      - "optimum/neuron/models/training/**.py"
      - "tests/training/**.py"
      - ".github/workflows/test_trainium_training.yml"
      - "optimum/neuron/utils/**.py"
      - "optimum/neuron/version.py"
  pull_request:
    branches: [ main ]
    paths:
      - "setup.py"
      - "optimum/neuron/models/training/**.py"
      - "tests/training/**.py"
      - ".github/workflows/test_trainium_training.yml"
      - "optimum/neuron/utils/**.py"
      - "optimum/neuron/version.py"
  schedule:
    - cron: "0 8 * * 1-5"  # 9 AM UTC + 1 time, Monday-Friday

concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref || github.run_id }}
  cancel-in-progress: true


jobs:
  optimum-neuron-tests:
    name: Run distributed tests on Trainium 1
    runs-on:
      group: aws-trn1-32xlarge
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Install Neuronx runtime
        uses: ./.github/actions/install_neuronx_runtime
      - name: Install cv2 dependencies
        run: |
          sudo apt-get install ffmpeg libsm6 libxext6  -y
      - name: Prepare virtual environment
        uses: ./.github/actions/prepare_venv
      - name: Install optimum-neuron
        uses: ./.github/actions/install_optimum_neuron
      - name: Setup PATH
        run: echo "/home/ubuntu/.local/bin" >> $GITHUB_PATH
      - name: Collect tests on Neuron Cores
        run: |
          source aws_neuron_venv_pytorch/bin/activate
          HF_TOKEN=${{ secrets.HF_TOKEN_OPTIMUM_NEURON_CI }} pytest -m "is_trainium_test" tests/training/ --collect-only
      - name: Run tests on Neuron Cores
        env:
          IS_CRON: ${{ github.event_name == 'schedule' }}
        run: |
          source aws_neuron_venv_pytorch/bin/activate
          HF_TOKEN=${{ secrets.HF_TOKEN_OPTIMUM_NEURON_CI }} EARLY_EXIT=1 pytest \
            -m "is_trainium_test" \
            --ignore tests/training/test_overfit.py \
            tests/training/ \
            -v
          if [ "$IS_CRON" = "true" ]; then
            # 2. Run all the overfit tests if the workflow is triggered by a cron job.
            HF_TOKEN=${{ secrets.HF_TOKEN_OPTIMUM_NEURON_CI }} EARLY_EXIT=1 pytest \
              -m "is_trainium_test" \
              tests/training/test_overfit.py \
              -v
          else
            # 2. Run the overfit tests only on the flagship model if the workflow is triggered by a push or pull request.
            HF_TOKEN=${{ secrets.HF_TOKEN_OPTIMUM_NEURON_CI }} EARLY_EXIT=1 pytest \
              -m "is_trainium_test and flagship_model" \
              tests/training/test_overfit.py \
              -v
          fi
